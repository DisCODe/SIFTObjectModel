/*!
 * \file
 * \brief
 * \author Tomek Kornuta,,,
 */

#include <memory>
#include <string>

#include "PCL2Octree.hpp"
#include "Common/Logger.hpp"

#include <boost/bind.hpp>

namespace Processors {
namespace PCL2Octree {

PCL2Octree::PCL2Octree(const std::string & name) :
		Base::Component(name)  {

}

PCL2Octree::~PCL2Octree() {
}

void PCL2Octree::prepareInterface() {
	// Register data streams.
	registerStream("in_cloud", &in_cloud_xyz);
	registerStream("in_cloud_xyzsift", &in_cloud_xyzsift);
	registerStream("in_cloud_xyzrgb", &in_cloud_xyzrgb);
	// Register handlers
	h_cloud_xyzrgb_to_octree.setup(boost::bind(&PCL2Octree::cloud_xyzrgb_to_octree, this));
	registerHandler("cloud_xyzrgb_to_octree", &h_cloud_xyzrgb_to_octree);

}

bool PCL2Octree::onInit() {

	return true;
}

bool PCL2Octree::onFinish() {
	return true;
}

bool PCL2Octree::onStop() {
	return true;
}

bool PCL2Octree::onStart() {
	return true;
}

void PCL2Octree::cloud_xyzrgb_to_octree() {
	// Read from dataport.
	pcl::PointCloud<pcl::PointXYZRGB>::Ptr cloud = in_cloud_xyzrgb.read();



}


} //: namespace PCL2Octree
} //: namespace Processors
